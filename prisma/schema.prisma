// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [cube]
}

model Passenger {
  id        Int    @id @default(autoincrement())
  firstName String @unique
  lastName  String
}

model User {
  id          Int    @id @default(autoincrement())
  email       String @unique
  password    String
  name        String
  birthdate   String
  gender      String
  country     String
  university  String
  department  String
  studentId   String
  createdAt   DateTime @default(now())

  pattern     UserPattern?
  userTypeScore UserTypeScore?

  roommateId     Int?             
  roommate       User?            @relation("RoommateRelation", fields: [roommateId], references: [id])
  roommates      User[]           @relation("RoommateRelation")

  sentRequests      MatchRequest[] @relation("SentRequests")
  receivedRequests  MatchRequest[] @relation("ReceivedRequests")
  @@map("users")
}

model UserPattern {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userInfo         Json

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("user_patterns")
}

model UserTypeScore {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  cleanliness     Float    @default(0.0)
  noise           Float    @default(0.0)
  sharedItems     Float    @default(0.0)
  communication     Float    @default(0.0)
  sleepPattern     Float    @default(0.0)
  patience         Float    @default(0.0)
  attention       Float    @default(0.0)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("user_type_scores")
}

model MatchRequest {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  status      MatchStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}